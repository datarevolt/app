<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>登录转换页面</title>
    <style>
        /* 样式保持不变 */
        /* 重置默认样式 */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        /* 确保iframe占满整个视口 */
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
        
        #iframeContainer {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
        }
        
        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="loading" class="loading">正在加载...</div>
    <div id="iframeContainer"></div>

    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script>
        // 初始化Telegram WebApp
        const tg = window.Telegram.WebApp;
        
        // 创建iframe并注入脚本
        function createIframe(loginData = null) {
            const container = document.getElementById('iframeContainer');
            const loading = document.getElementById('loading');
            
            // 创建iframe
            const iframe = document.createElement('iframe');
            iframe.id = 'loginFrame';
            iframe.allow = 'cookies; storage-access';
            iframe.style.cssText = 'width:100%;height:100%;border:none;position:fixed;top:0;left:0;';
            
            // 准备要注入的脚本
            const injectScript = `
                <script>
                // 设置Cookie的函数
                function setCookies(cookies) {
                    for (const [name, value] of Object.entries(cookies)) {
                        document.cookie = name + '=' + value + '; path=/';
                    }
                }

                // 监听登录表单
                function setupLoginFormListener() {
                    const form = document.querySelector('form');
                    if (form) {
                        form.addEventListener('submit', function(e) {
                            const allCookies = document.cookie.split(';').reduce((acc, cookie) => {
                                const [name, value] = cookie.trim().split('=');
                                acc[name] = value;
                                return acc;
                            }, {});

                            const storageData = {};
                            for (let i = 0; i < localStorage.length; i++) {
                                const key = localStorage.key(i);
                                storageData[key] = localStorage.getItem(key);
                            }

                            window.parent.postMessage({
                                type: 'LOGIN_SUCCESS',
                                cookies: allCookies,
                                localStorage: storageData,
                                token: localStorage.getItem('token'),
                                userId: localStorage.getItem('userId')
                            }, '*');
                        });
                    }
                }

                // 监听localStorage变化
                const originalSetItem = localStorage.setItem;
                localStorage.setItem = function(key, value) {
                    originalSetItem.apply(this, arguments);
                    if (key === 'token' || key === 'userId') {
                        const allCookies = document.cookie.split(';').reduce((acc, cookie) => {
                            const [name, value] = cookie.trim().split('=');
                            acc[name] = value;
                            return acc;
                        }, {});

                        const storageData = {};
                        for (let i = 0; i < localStorage.length; i++) {
                            const key = localStorage.key(i);
                            storageData[key] = localStorage.getItem(key);
                        }

                        window.parent.postMessage({
                            type: 'LOGIN_SUCCESS',
                            cookies: allCookies,
                            localStorage: storageData,
                            token: localStorage.getItem('token'),
                            userId: localStorage.getItem('userId')
                        }, '*');
                    }
                };

                // 监听来自父窗口的消息
                window.addEventListener('message', function(event) {
                    if (event.data.type === 'RESTORE_DATA') {
                        const data = event.data.data;
                        if (data.cookies) {
                            setCookies(data.cookies);
                        }
                        if (data.localStorage) {
                            Object.entries(data.localStorage).forEach(([key, value]) => {
                                localStorage.setItem(key, value);
                            });
                        }
                        window.parent.postMessage({ type: 'RESTORE_COMPLETE' }, '*');
                    }
                });

                // 页面加载完成后设置监听器
                window.addEventListener('load', setupLoginFormListener);
                <\/script>
            `;

            // 如果有登录数据，先创建一个隐藏的iframe来设置Cookie
            if (loginData && loginData.cookies) {
                const tempFrame = document.createElement('iframe');
                tempFrame.style.display = 'none';
                tempFrame.srcdoc = `
                    <script>
                    const cookies = ${JSON.stringify(loginData.cookies)};
                    for (const [name, value] of Object.entries(cookies)) {
                        document.cookie = name + '=' + value + '; path=/';
                    }
                    <\/script>
                `;
                document.body.appendChild(tempFrame);
                
                // 等待Cookie设置完成后移除临时iframe
                setTimeout(() => {
                    document.body.removeChild(tempFrame);
                }, 100);
            }

            // 设置iframe的内容
            iframe.srcdoc = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    ${injectScript}
                </head>
                <body>
                    <script>
                    // 等待Cookie设置完成后加载目标页面
                    setTimeout(() => {
                        window.location.href = 'https://rankingoptimization.net/h5.html#/pages/system/login';
                    }, 100);
                    <\/script>
                </body>
                </html>
            `;

            // 监听iframe加载完成
            iframe.onload = function() {
                loading.style.display = 'none';
                
                // 如果有登录数据，发送到iframe
                if (loginData) {
                    iframe.contentWindow.postMessage({
                        type: 'RESTORE_DATA',
                        data: loginData
                    }, '*');
                }
            };

            // 添加iframe到页面
            container.appendChild(iframe);
            return iframe;
        }

        // 保存登录状态
        async function saveLoginState(loginData) {
            if (tg && tg.CloudStorage) {
                const encryptedData = btoa(JSON.stringify(loginData));
                await tg.CloudStorage.setItem('loginCredentials', encryptedData);
                return true;
            }
            return false;
        }

        // 获取存储的登录状态
        async function getStoredLoginState() {
            if (tg && tg.CloudStorage) {
                try {
                    const storedData = await tg.CloudStorage.getItem('loginCredentials');
                    if (storedData) {
                        return JSON.parse(atob(storedData));
                    }
                } catch (error) {
                    console.error('获取存储数据失败:', error);
                }
            }
            return null;
        }

        // 监听消息
        window.addEventListener('message', async function(event) {
            if (!event.data || !event.data.type) return;
            
            const loading = document.getElementById('loading');
            
            try {
                switch(event.data.type) {
                    case 'LOGIN_SUCCESS':
                        loading.style.display = 'block';
                        loading.textContent = '正在保存登录状态...';
                        
                        const loginData = {
                            timestamp: new Date().getTime(),
                            cookies: event.data.cookies || {},
                            localStorage: event.data.localStorage || {},
                            token: event.data.token,
                            userId: event.data.userId
                        };
                        
                        if (await saveLoginState(loginData)) {
                            loading.textContent = '登录状态已保存';
                            tg.MainButton.setText('登录成功');
                            tg.MainButton.show();
                            
                            setTimeout(() => {
                                tg.close();
                            }, 1500);
                        }
                        break;

                    case 'RESTORE_COMPLETE':
                        loading.textContent = '登录状态已恢复';
                        setTimeout(() => {
                            loading.style.display = 'none';
                        }, 1000);
                        break;
                }
            } catch (error) {
                console.error('处理消息错误:', error);
                loading.textContent = '操作失败，请重试';
                setTimeout(() => {
                    loading.style.display = 'none';
                }, 2000);
            }
        });

        // 初始化页面
        async function initializePage() {
            const loading = document.getElementById('loading');
            loading.style.display = 'block';
            loading.textContent = '正在检查登录状态...';
            
            try {
                const loginData = await getStoredLoginState();
                if (loginData) {
                    loading.textContent = '正在恢复登录状态...';
                    createIframe(loginData);
                } else {
                    createIframe();
                }
            } catch (error) {
                console.error('初始化失败:', error);
                loading.textContent = '初始化失败，请重试';
                setTimeout(() => {
                    loading.style.display = 'none';
                }, 2000);
            }
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', initializePage);

        // 初始化Telegram WebApp设置
        if (tg) {
            tg.expand();
            tg.enableClosingConfirmation();
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.backgroundColor);
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.textColor);
        }
    </script>
</body>
</html>
